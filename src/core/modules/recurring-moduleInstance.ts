import {ObjectId} from 'mongodb';
import {ILinksToPostModelDocument} from '../../db/models/links-to-post.model';
import {
  default as RegisteredModuleModel,
  IRegisteredModuleModelDocument
} from '../../db/models/registered-module.model';
import {LoggerService} from '../../services/logger.service';
import Timer = NodeJS.Timer;

const logService = new LoggerService('Registered Modules');

const MINUTE = 60000;

export abstract class RecurringModuleInstance<DataType = any> {

  protected _interval: Timer;
  protected model: IRegisteredModuleModelDocument<any>;
  protected logService: LoggerService;

  constructor(public modelId: ObjectId) {
    this.logService = new LoggerService(`Registered Modules: "${modelId}"`);
    this.init();
  }

  public destroy() {
    logService.info(`Stopping instance for moduleId ${this.model._id} for channel ${this.model.chanelId}`);
    clearInterval(this._interval);
  }

  public init() {
    RegisteredModuleModel
      .findById(this.modelId)
      .then((model) => {
        this.model = model;

        logService.info(`Init channel ${this.model.chanelId}`);

        if (this._interval) {
          clearInterval(this._interval);
        }

        this._interval = setInterval(() => this.onAction(), MINUTE * this.model.configuration.frequency);

        this.onAction();
      });
  }

  /**
   * Collect data from DB in this method
   */
  protected abstract collectData(): Promise<ILinksToPostModelDocument[]>;

  /**
   * Convert collected data from the DB to the ready for send data
   * @param items - data collected from the method `collectData`
   */
  protected abstract mapData(items: ILinksToPostModelDocument[]): DataType;

  /**
   * Use this method to validate received data. If you don't need to post empty data.
   * @param data - data generated by the map function `mapData`
   */
  protected abstract validate(data: DataType): boolean;

  /**
   * Method uses to post data to the related messenger
   * @param data - data generated by the map function `mapData`
   */
  protected abstract postData(data: DataType): Promise<void>;

  /**
   * Method designed for any stuff you need to do after the messages were posted
   * @param items - data collected from the method `collectData`
   */
  protected async afterPost(items: ILinksToPostModelDocument[]): Promise<void> {
    for (const item of items) {
      const postedChannels = [...item.postedChannels, this.model.chanelId];

      await item.update({postedChannels});
    }
  }

  /**
   * Life cycle for the recurring action
   * Fires on every model.configuration.frequency cycle ends
   */
  protected async onAction(): Promise<void> {
    logService.info(`Time to post to channel!`, this.model.toObject());

    const items: ILinksToPostModelDocument[] = await this.collectData();
    const data: DataType = this.mapData(items);

    if (!this.validate(data)) {
      this.logService.info(`Nothing to post right now!`, this.model.toObject());

      return;
    }

    await this.postData(data);

    await this.afterPost(items);
  }
}
